{"version":3,"sources":["components/templates/GameStartTemplate.tsx","assets/svgs/character.svg","assets/svgs/food.svg","common/assets.tsx","assets/svgs/bg-mesh.svg","components/UI/organisms/GameDetails.tsx","components/UI/atoms/GameTitle.tsx","components/UI/molecules/Heading.tsx","components/UI/atoms/GameText.tsx","components/UI/atoms/GameGridText.tsx","components/UI/atoms/GridInputField.tsx","components/UI/molecules/GameGrid.tsx","components/UI/atoms/StartGameButton.tsx","components/pages/GameStartPage.tsx","components/pages/GameOverPage.tsx","components/pages/GameBravoPage.tsx","components/templates/GamePlayTemplate.tsx","common/utils.tsx","components/UI/atoms/Box.tsx","components/UI/atoms/GridBoxes.tsx","common/moveCharacter.tsx","components/UI/molecules/GameBoard.tsx","components/UI/atoms/GridValue.tsx","components/UI/atoms/TimeIndicator.tsx","components/UI/atoms/TimeSpent.tsx","components/UI/molecules/IndicatorFrame.tsx","components/UI/atoms/Moves.tsx","components/UI/molecules/MovesFrame.tsx","components/UI/organisms/GameFrame.tsx","components/pages/GamePlayPage.tsx","App.tsx","reducers/rootReducer.tsx","reducers/store.tsx","index.tsx"],"names":["GameStartTemplate","bgMeshLeft","gameDetails","bgMeshRight","className","src","alt","assets","character","bgMesh","food","GameDetails","heading","gameText","gameText2","gameText3","gameGrid","startGameButton","GameTitle","gameTitle","Heading","headingTitle","GameText","GameGridText","gameGridText","GridInputField","minGridValue","useSelector","state","maxGridValue","gridValue","grid","dispatch","useDispatch","onInput","event","gridInputValue","target","value","type","payload","min","max","defaultValue","GameGrid","StartGameButton","buttonText","to","onClick","GameStartPage","props","useSpring","opacity","marginTop","from","div","style","GameOverPage","timeSpent","foodsEaten","totalFoods","delay","GameBravoPage","moves","totalMoves","x","transform","Math","round","GamePlayTemplate","gameFrame","randomArrays","Array","length","abs","floor","random","randomFoodAndCharacter","generatedArray","box","array2D","genRandomArrays","genRandomNumArray","randomNumArray","map","arr","i","forEach","el","tempArray","tempArr","play","audioFile","audio","Audio","preload","Box","children","GridBoxes","allFoods","useState","emptyBox","gameSound","history","useHistory","foods","positionChar","handleClick","preventDefault","newCharElemId","characterPositionId","characterPosition","split","newCharacterPosition","shift","move","JSON","stringify","every","val","calculateNextMove","currentTarget","id","elemId","document","getElementById","innerHTML","isBoxEmpty","newCharPosition","newCharElement","moveCharacter","useEffect","t","setInterval","indicator","countDown","Number","timeTakenPercent","width","toString","padStart","clearInterval","m","push","items","index","subItems","sIndex","GameBoard","GridValue","TimeIndicator","TimeSpent","IndicatorFrame","Moves","numberOfMoves","moveDescription","MovesFrame","maxMoves","GameFrame","GamePlayPage","marginLeft","transition","duration","App","hasStartedGame","startedGame","exact","path","initialState","window","screen","test","navigator","userAgent","rootReducer","action","store","createStore","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c9714176.chunk.js","sourcesContent":["interface IGameStartProps {\r\n    bgMeshLeft: string,\r\n    gameDetails: JSX.Element,\r\n    bgMeshRight: string,\r\n}\r\n\r\nfunction GameStartTemplate({bgMeshLeft, gameDetails, bgMeshRight}: IGameStartProps): JSX.Element {\r\n    return (\r\n        <div className=\"game-start-page\">\r\n            <div className=\"bg-mesh bg-mesh-left\">\r\n                <img src={bgMeshLeft} alt=\"BG Mesh\" />\r\n            </div>\r\n            \r\n            {gameDetails}\r\n\r\n            <div className=\"bg-mesh bg-mesh-right\">\r\n                <img src={bgMeshRight} alt=\"BG Mesh\" />\r\n            </div>\r\n        </div>    \r\n    ); \r\n}\r\n\r\nexport default GameStartTemplate;","export default __webpack_public_path__ + \"static/media/character.2b44b5a6.svg\";","export default __webpack_public_path__ + \"static/media/food.e5ffaf99.svg\";","import character from '../assets/svgs/character.svg';\r\nimport food from '../assets/svgs/food.svg';\r\nimport bgMesh from '../assets/svgs/bg-mesh.svg';\r\n\r\ninterface IAssets {\r\n    character: string,\r\n    bgMesh: string,\r\n    food: string,\r\n}\r\n\r\nconst assets: IAssets = {\r\n    character: character,\r\n    bgMesh: bgMesh,\r\n    food: food,\r\n}\r\n\r\nexport default assets;","export default __webpack_public_path__ + \"static/media/bg-mesh.d1a2355f.svg\";","interface IGameDetailsProps {\r\n    heading: JSX.Element,\r\n    gameText: JSX.Element,\r\n    gameText2?: JSX.Element,\r\n    gameText3?: JSX.Element,\r\n    gameGrid: JSX.Element,\r\n    startGameButton: JSX.Element,\r\n}\r\n\r\nfunction GameDetails({heading, gameText, gameText2, gameText3, gameGrid, startGameButton}: IGameDetailsProps): JSX.Element {\r\n    return (\r\n        <div className=\"game-details\">\r\n            {heading}\r\n            {gameText}\r\n            {gameText2}\r\n            {gameText3}\r\n            {gameGrid}\r\n            {startGameButton}\r\n        </div>    \r\n    ); \r\n}\r\n\r\nexport default GameDetails;\r\n","type GamTitleProps = {\r\n    gameTitle: string;\r\n};\r\n\r\nfunction GameTitle({gameTitle}: GamTitleProps): JSX.Element {\r\n    return (\r\n        <h1 className=\"heading-text\">\r\n            {gameTitle}\r\n        </h1>\r\n    ); \r\n}\r\n\r\nexport default GameTitle;","import assets from '../../../common/assets';\r\nimport GameTitle from '../atoms/GameTitle';\r\n\r\ntype HeadingTitleProps = {\r\n    headingTitle: string\r\n}\r\n\r\nfunction Heading({headingTitle}: HeadingTitleProps): JSX.Element {\r\n    return (\r\n        <div className=\"heading\">\r\n            <div>\r\n                <img src={assets.character} alt=\"&#x1F975;\" />\r\n            </div>\r\n            <div>\r\n                <GameTitle gameTitle={headingTitle}/>\r\n            </div>\r\n        </div>    \r\n    ); \r\n}\r\n\r\nexport default Heading;","type GameTextProps = {\r\n    gameText: string | JSX.Element;\r\n};\r\n\r\nfunction GameText({gameText}: GameTextProps): JSX.Element {\r\n    return (<div className=\"game-text\">{gameText}</div>); \r\n}\r\n\r\nexport default GameText;","type GameGridTextProps = {\r\n    gameGridText: string;\r\n};\r\n\r\nfunction GameGridText({gameGridText}: GameGridTextProps): JSX.Element {\r\n    return (\r\n        <div className=\"game-grid-text\">{gameGridText}</div>\r\n    ); \r\n}\r\n\r\nexport default GameGridText;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { IStateProps } from \"../../../reducers/rootReducer\";\r\n\r\nfunction GridInputField(): JSX.Element {\r\n    const minGridValue: number = useSelector<IStateProps, IStateProps[\"minGridValue\"]>((state)=> state.minGridValue);\r\n    const maxGridValue: number = useSelector<IStateProps, IStateProps[\"maxGridValue\"]>((state)=> state.maxGridValue);\r\n    const gridValue: number = useSelector<IStateProps, IStateProps[\"grid\"]>((state)=> state.grid);\r\n    const dispatch =  useDispatch();\r\n\r\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>)=>{\r\n        let gridInputValue = +(event.target.value);\r\n\r\n        dispatch({type:\"UPDATE_GRID\", payload: gridInputValue});\r\n        \r\n        if(gridInputValue > maxGridValue){\r\n            event.target.value = maxGridValue+\"\";\r\n        }\r\n\r\n        if(gridInputValue < minGridValue && gridInputValue > 1 ){\r\n            event.target.value = minGridValue+\"\";\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <input onInput={handleInputChange} className=\"grid-input\" min={minGridValue} max={maxGridValue} type=\"number\" defaultValue={gridValue} />\r\n    );\r\n}\r\n\r\nexport default GridInputField;","import GameGridText from \"../atoms/GameGridText\";\r\nimport GridInputField from \"../atoms/GridInputField\";\r\n\r\nfunction GameGrid(): JSX.Element {\r\n    return (\r\n        <div className=\"game-grid\">\r\n            <div>\r\n                <GameGridText gameGridText=\"Game grid\" />\r\n            </div>\r\n            <div>\r\n                <GridInputField />\r\n            </div>\r\n        </div>    \r\n    ); \r\n}\r\n\r\nexport default GameGrid;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ntype ButtonTextProps = {\r\n    buttonText: string;\r\n};\r\n\r\nfunction StartGameButton({buttonText}: ButtonTextProps): JSX.Element {\r\n    const dispatch = useDispatch();\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>)=>{\r\n        dispatch({type:\"START_GAME\", payload: true});\r\n    }\r\n\r\n    return (\r\n        <Link to=\"/play\">\r\n            <button onClick={handleClick} className=\"button\">{buttonText}</button>\r\n        </Link>\r\n    ); \r\n}\r\n\r\nexport default StartGameButton;","import GameStartTemplate from \"../templates/GameStartTemplate\";\r\nimport assets from '../../common/assets';\r\nimport GameDetails from \"../UI/organisms/GameDetails\";\r\nimport Heading from \"../UI/molecules/Heading\";\r\nimport GameText from \"../UI/atoms/GameText\";\r\nimport GameGrid from \"../UI/molecules/GameGrid\";\r\nimport StartGameButton from \"../UI/atoms/StartGameButton\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nfunction GameStartPage(): JSX.Element {\r\n    const props = useSpring({ to: { opacity: 1, marginTop: 0 }, from: { opacity: 0, marginTop: -500 } })\r\n    return (\r\n        <animated.div style={props} className=\"container\">\r\n            <GameStartTemplate \r\n                bgMeshLeft={assets.bgMesh}\r\n                gameDetails={\r\n                    <GameDetails \r\n                        heading={<Heading headingTitle=\"Greedy Hunter\" />}\r\n                        gameText={\r\n                            <GameText gameText=\"The aim is to eat all the food in record time\" />\r\n                        }\r\n                        gameText2={\r\n                            <GameText gameText=\"Configure your game grid below &#x1F447;\" />\r\n                        }\r\n                        gameGrid={<GameGrid />}\r\n                        startGameButton={<StartGameButton buttonText=\"Start game\" />}\r\n                    />\r\n                    \r\n                }\r\n                bgMeshRight={assets.bgMesh}\r\n            />\r\n        </animated.div>  \r\n    ); \r\n}\r\n\r\nexport default GameStartPage;\r\n\r\n","import GameStartTemplate from \"../templates/GameStartTemplate\";\r\nimport assets from '../../common/assets';\r\nimport GameDetails from \"../UI/organisms/GameDetails\";\r\nimport Heading from \"../UI/molecules/Heading\";\r\nimport GameText from \"../UI/atoms/GameText\";\r\nimport GameGrid from \"../UI/molecules/GameGrid\";\r\nimport StartGameButton from \"../UI/atoms/StartGameButton\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IStateProps } from \"../../reducers/rootReducer\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\n\r\nfunction GameOverPage(): JSX.Element {\r\n    const timeSpent: number = useSelector<IStateProps, IStateProps[\"timeSpent\"]>((state)=> state.timeSpent);\r\n    const foodsEaten: number = useSelector<IStateProps, IStateProps[\"foodsEaten\"]>((state)=> state.foodsEaten);\r\n    const totalFoods: number = useSelector<IStateProps, IStateProps[\"totalFoods\"]>((state)=> state.totalFoods);\r\n\r\n    const props = useSpring({ to: { opacity: 1 }, from: { opacity: 0 }, delay: 500, })\r\n\r\n\r\n    return (\r\n\r\n        <animated.div style={props} className=\"container\">\r\n            <GameStartTemplate\r\n                bgMeshLeft={assets.bgMesh}\r\n                gameDetails={\r\n                    <GameDetails \r\n                        heading={<Heading headingTitle=\"Game Over!\" />}\r\n                        gameText={\r\n                            <GameText gameText={<>Total Food: <b className=\"bold\">{`${foodsEaten}/${totalFoods}`}</b></>} />\r\n                        }\r\n                        gameText2={\r\n                            <GameText gameText={<>Time spent: <b className=\"bold\">{timeSpent}</b> seconds</>} />\r\n                        }\r\n                        gameGrid={<GameGrid  />}\r\n                        startGameButton={<StartGameButton buttonText=\"Start again\" />}\r\n                    />\r\n                    \r\n                }\r\n                bgMeshRight={assets.bgMesh}\r\n            />\r\n        </animated.div>  \r\n    ); \r\n}\r\n\r\nexport default GameOverPage;","import GameStartTemplate from \"../templates/GameStartTemplate\";\r\nimport assets from '../../common/assets';\r\nimport GameDetails from \"../UI/organisms/GameDetails\";\r\nimport Heading from \"../UI/molecules/Heading\";\r\nimport GameText from \"../UI/atoms/GameText\";\r\nimport GameGrid from \"../UI/molecules/GameGrid\";\r\nimport StartGameButton from \"../UI/atoms/StartGameButton\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { IStateProps } from \"../../reducers/rootReducer\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\n\r\n\r\nfunction GameBravoPage(): JSX.Element {\r\n    const timeSpent: number = useSelector<IStateProps, IStateProps[\"timeSpent\"]>((state)=> state.timeSpent);\r\n    const moves: number = useSelector<IStateProps, IStateProps[\"totalMoves\"]>((state)=> state.totalMoves);\r\n    const gridValue: number = useSelector<IStateProps, IStateProps[\"grid\"]>((state)=> state.grid);\r\n\r\n    const props = useSpring<{x: number, to: object}>({ x: 1, to: { opacity: 1, transform: `scale(${1})` }, from: { opacity: 0, transform: `scale(${0})` }, });\r\n\r\n\r\n    return (\r\n        <animated.div\r\n            style={props} className=\"container\">\r\n                <GameStartTemplate\r\n                    bgMeshLeft={assets.bgMesh}\r\n                    gameDetails={\r\n                        <GameDetails \r\n                            heading={<Heading headingTitle=\"Bravo!\" />}\r\n                            gameText={\r\n                                <GameText gameText={<>Time spent: <b className=\"bold\">{timeSpent}</b> seconds</>} />\r\n                            }\r\n                            gameText2={\r\n                                <GameText gameText={<>Moves: <b className=\"bold\">{moves}/{Math.round((gridValue * gridValue)/2)}</b></>} />\r\n                            }\r\n                            gameText3={\r\n                                <GameText gameText={<>Grid Size: <b className=\"bold\">{gridValue}</b></>} />\r\n                            }\r\n                            gameGrid={<GameGrid />}\r\n                            startGameButton={<StartGameButton buttonText=\"Start again\" />}\r\n                        />\r\n                        \r\n                    }\r\n                    bgMeshRight={assets.bgMesh}\r\n                />\r\n        </animated.div>  \r\n    ); \r\n}\r\n\r\nexport default GameBravoPage;","function GamePlayTemplate({gameFrame}: {gameFrame: JSX.Element}): JSX.Element {\r\n    return (\r\n        <>\r\n            {gameFrame}\r\n        </>\r\n           \r\n    ); \r\n}\r\n\r\nexport default GamePlayTemplate;","\r\ntype StringJSX = string | JSX.Element;\r\n\r\ninterface IGridPatternParams {\r\n    grid: number,\r\n    box: string,\r\n    character: string,\r\n    food: string,\r\n}\r\n\r\n\r\nfunction randomInteger(min: number, max: number): number {\r\n    return Math.abs(Math.floor(Math.random() * (max - min + 1))) + min;\r\n}\r\n\r\n\r\nfunction randomNumArray(grid: number): number[]{\r\n    return [\r\n        Math.abs(Math.floor(Math.random() * grid)),\r\n        Math.abs(Math.floor(Math.random() * grid))\r\n    ];\r\n}\r\n\r\nfunction randomArrays(grid: number): number[][]{\r\n    return Array.from({length: randomInteger(grid*2-1,grid*2)}, () => Array.from({length: 2}, () => Math.abs(Math.floor(Math.random() * grid))));\r\n}\r\n\r\n\r\nfunction array2D(box: StringJSX, grid: number): StringJSX[][] {\r\n    return Array.from({length: grid}, ()=> (Array.from({length: grid}, ()=> box)));\r\n}\r\n\r\nexport function randomFoodAndCharacter(grid: number){\r\n    let generatedArray: StringJSX[][] = array2D(\"\",grid);\r\n    let genRandomArrays = randomArrays(grid);\r\n    let genRandomNumArray = randomNumArray(grid);\r\n    \r\n    generatedArray = generatedArray.map((arr, i)=> {\r\n        genRandomArrays.forEach(el=> {\r\n            if(i===el[0]){\r\n                let tempArray: StringJSX[] = [...arr];\r\n                tempArray[el[1]] = \"F\";\r\n                arr = tempArray;\r\n            }  \r\n        });\r\n\r\n        if(i === genRandomNumArray[0]){\r\n            let tempArr: StringJSX[] = [...arr];\r\n            tempArr[genRandomNumArray[1]] = \"C\";\r\n            arr = tempArr;\r\n        } \r\n\r\n        return arr;\r\n    });\r\n\r\n    return generatedArray;\r\n}\r\n\r\n\r\n\r\nfunction gridPattern({grid,box,character,food}: IGridPatternParams): string[][]{\r\n    let eachArrayBox: string[] = Array.from({length: grid}, ()=> box);\r\n    let arrayBox: string[][] = Array.from({length: grid}, ()=> eachArrayBox);\r\n    let randNumArr: number[] = [\r\n        Math.abs(Math.floor(Math.random() * grid)),\r\n        Math.abs(Math.floor(Math.random() * grid))\r\n    ];\r\n\r\n    arrayBox = arrayBox.map((arr, i)=> {\r\n\r\n        //Insert the foods randomly on the grid\r\n        randomArrays(grid).forEach(el=> {\r\n            if(i===el[0]){\r\n                let tempArray: string[] = [...arr];\r\n                tempArray[el[1]] = food;\r\n                arr = tempArray;\r\n            }  \r\n        });\r\n\r\n\r\n        //Insert the character randomly on the grid\r\n        if(i===randNumArr[0]){\r\n            let tempArr: string[] = [...arr];\r\n            tempArr[randNumArr[1]] = character;\r\n            arr = tempArr;\r\n        } \r\n\r\n        // countFoodBoxes += arr.filter(el => el == food).length;\r\n\r\n        return arr;\r\n    });\r\n\r\n    // totalFoodBoxes = countFoodBoxes;\r\n\r\n  \r\n  return arrayBox;\r\n}\r\n\r\n\r\nexport const play = (audioFile: string): void=>{\r\n    let audio = new Audio(audioFile);\r\n    audio.play();\r\n    audio.preload = 'auto';\r\n}\r\n\r\nexport function isBoxEmpty(elemId: string): boolean{\r\n    if(document.getElementById(elemId)?.innerHTML){\r\n        // countFoodBoxes = countFoodBoxes - 1;\r\n        \r\n        //play munching sound\r\n        play('https://freesound.org/data/previews/467/467610_9659530-lq.mp3');\r\n        \r\n        \r\n        return true\r\n    } \r\n    return false;\r\n}\r\n\r\n\r\nexport function calculateNextMove(newCharElemId: string, characterPositionId: string): Boolean{\r\n    let characterPosition = characterPositionId.split(\"_\");\r\n    let newCharacterPosition = newCharElemId.split(\"_\");\r\n    characterPosition.shift();\r\n    newCharacterPosition.shift();\r\n\r\n    let possibleMoves = [ ];\r\n    let upward = [(+characterPosition[0]-1)+\"\",characterPosition[1]];\r\n    let downward = [(+characterPosition[0]+1)+\"\",characterPosition[1]];\r\n    let right = [characterPosition[0],(+characterPosition[1]+1)+\"\"];\r\n    let left = [characterPosition[0],(+characterPosition[1]-1)+\"\"];\r\n    possibleMoves = [upward,downward,right,left];\r\n\r\n    // //console.log(possibleMoves);\r\n\r\n    let moveCheck = possibleMoves.map(move=> JSON.stringify(move) === JSON.stringify(newCharacterPosition));\r\n\r\n    if(moveCheck.every(val=> val === false)){\r\n        play('https://freesound.org/data/previews/351/351563_2398403-lq.mp3');\r\n        return false;\r\n    } \r\n\r\n    return true;\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nexport default gridPattern;","import { ReactChild } from \"react\";\r\n\r\ninterface IBoxProps {\r\n    // id: string,\r\n    children?: ReactChild,\r\n    // handleClick(id: string): void\r\n}\r\nfunction Box({ children }: IBoxProps):JSX.Element{\r\n    return (\r\n        <div>{children}</div>\r\n    );\r\n}\r\n\r\nexport default Box;","import React, { MouseEvent, useEffect, useState } from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport assets from \"../../../common/assets\";\r\nimport { calculateNextMove, isBoxEmpty, play, randomFoodAndCharacter } from \"../../../common/utils\";\r\nimport moveCharacter  from \"../../../common/moveCharacter\";\r\nimport {IStateProps} from '../../../reducers/rootReducer';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Box from \"./Box\";\r\n\r\n\r\n\r\n\r\n\r\nconst GridBoxes = (): JSX.Element => {\r\n\r\n    let allFoods = 0;\r\n\r\n    const [emptyBox] = useState(\"\");\r\n    const [character] = useState(assets.character);\r\n    const gridValue: number = useSelector<IStateProps, IStateProps[\"grid\"]>((state)=> state.grid);\r\n    const gameSound: boolean = useSelector<IStateProps, IStateProps[\"gameSound\"]>((state)=> state.gameSound);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    let [moves, foods] = [0,0];\r\n    let positionChar = \"\";\r\n    \r\n    \r\n    const handleClick = (event: MouseEvent)=> {\r\n        event.preventDefault();\r\n\r\n        const { target } = event;\r\n        // let previous = positionChar;\r\n        //console.log(\"previous id\", positionChar);\r\n\r\n        if (target){\r\n            \r\n            \r\n            if(!(calculateNextMove(event.currentTarget.id,positionChar))) return false;\r\n\r\n            if(isBoxEmpty(event.currentTarget.id)){\r\n                foods++;\r\n            }\r\n\r\n            \r\n            moveCharacter(event.currentTarget.id, character);\r\n\r\n            (document.getElementById(positionChar) as any).innerHTML = emptyBox;\r\n            \r\n            \r\n            positionChar = event.currentTarget.id;\r\n            // //console.log(getCharacterPosition(boxElements));\r\n            // dispatch({type:\"COUNT_MOVES\", payload: 5});\r\n            moves++;\r\n\r\n        }\r\n        \r\n\r\n        \r\n        \r\n    }\r\n\r\n    useEffect(()=> {\r\n\r\n        let t = setInterval(()=> {\r\n            const timeSpent = document.getElementById(\"time-spent\");\r\n            const indicator = document.getElementById(\"indicator\");\r\n            \r\n            let countDown = Number(timeSpent?.innerHTML);\r\n            countDown = countDown - 1;\r\n            \r\n            let timeTakenPercent = ((gridValue*3) - countDown) / (gridValue*3) * 100;\r\n            \r\n            \r\n            dispatch({type:\"SET_TIME\", payload: (gridValue*3)-countDown});\r\n            \r\n    \r\n            if(indicator || timeSpent){\r\n                (indicator as any).style.width = timeTakenPercent+\"%\";\r\n                (timeSpent as any).innerHTML = countDown.toString().length < 2 ? countDown.toString().padStart(2,\"0\") : countDown;\r\n            }\r\n        \r\n            //Check countdown time\r\n            if( countDown < 1 ){\r\n                clearInterval(t);\r\n                clearInterval(m);\r\n\r\n                history.push(\"/over\");\r\n                gameSound && play(\"https://freesound.org/data/previews/175/175409_1326576-lq.mp3\");\r\n                \r\n            } \r\n            //Check if all foods have been eaten\r\n            else if(foods === allFoods){\r\n                clearInterval(t);\r\n                clearInterval(m);\r\n\r\n                history.push(\"/finished\");\r\n                gameSound && play(\"https://freesound.org/data/previews/258/258142_4631294-lq.mp3\");\r\n\r\n            }\r\n        }, 1000);\r\n\r\n        let m = setInterval(()=> {\r\n            if((moves === Math.round((gridValue * gridValue)/2) && foods !== allFoods)){\r\n                clearInterval(t);\r\n                clearInterval(m);\r\n\r\n                history.push(\"/over\");\r\n                gameSound && play(\"https://freesound.org/data/previews/175/175409_1326576-lq.mp3\");\r\n            }\r\n\r\n            dispatch({type:\"COUNT_MOVES\", payload: moves});\r\n            dispatch({type:\"FOODS_EATEN\", payload: foods});\r\n        }, 300);\r\n\r\n        //Sends total number of foods to store\r\n        dispatch({type:\"TOTAL_FOODS\", payload: allFoods})\r\n        //console.log(allFoods);\r\n    });\r\n    \r\n    \r\n\r\n\r\n    return(\r\n           \r\n        <div>\r\n            {randomFoodAndCharacter(gridValue).map((items, index) => {\r\n                return (\r\n                    <div key={index} className=\"col\">\r\n                    {items.map((subItems, sIndex) => {\r\n                        if(subItems === \"F\"){\r\n                            subItems = <div onClick={handleClick} className=\"box\" id={`id_${index}_${sIndex}`} key={sIndex}><Box key={`key_${sIndex}`}><img src={assets.food} alt=\"food\" className=\"img\" /></Box></div>\r\n                            allFoods += 1;\r\n                        } else if(subItems === \"C\"){\r\n                            positionChar = `id_${index}_${sIndex}`;\r\n                            subItems = <div onClick={handleClick} className=\"box\" id={`id_${index}_${sIndex}`} key={sIndex}><Box key={`key_${sIndex}`}><img src={assets.character} alt=\"character\" className=\"img\" /></Box></div>\r\n                        } else {\r\n                            subItems = <div onClick={handleClick} className=\"box\" id={`id_${index}_${sIndex}`} key={sIndex}></div>\r\n                        }\r\n\r\n\r\n                        return subItems;\r\n                    })}\r\n                </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default GridBoxes;\r\n\r\n\r\n\r\n","\r\n\r\nexport default function moveCharacter(newCharPosition: string, character: string){ \r\n\r\n\r\n    let newCharElement = document.getElementById(newCharPosition) as HTMLElement;\r\n\r\n    if(newCharElement){\r\n        \r\n        newCharElement.innerHTML = `<img src=${character} alt=\"character\" class=\"img\" />`;\r\n    }\r\n\r\n    // characterPositionId = newCharPosition;\r\n\r\n    \r\n\r\n    return false;\r\n\r\n}\r\n\r\n\r\n","\r\nimport GridBoxes from \"../atoms/GridBoxes\";\r\n\r\n\r\n\r\nfunction GameBoard(): JSX.Element{\r\n    \r\n    return(\r\n        <div className=\"game-board\">\r\n            <GridBoxes />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameBoard;","import { useSelector } from \"react-redux\";\r\nimport { IStateProps } from \"../../../reducers/rootReducer\";\r\n\r\nfunction GridValue(): JSX.Element {\r\n    const gridValue: number = useSelector<IStateProps, IStateProps[\"grid\"]>((state)=> state.grid);\r\n\r\n    return (\r\n        <div className=\"indicator-frame__div\">\r\n            Grid: &nbsp; <strong> {gridValue} x {gridValue}</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GridValue;","function TimeIndicator(): JSX.Element{\r\n    return (\r\n        <div className=\"indicator-frame__div\" id=\"heart-box\">\r\n            <div id=\"heart\">\r\n                <div id=\"ellipse\"></div> <div id=\"ellipse2\"></div>\r\n            </div>\r\n            <div id=\"indicator-box\">\r\n                <div id=\"indicator\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimeIndicator;","import { useSelector } from \"react-redux\";\r\nimport { IStateProps } from \"../../../reducers/rootReducer\";\r\n\r\nfunction TimeSpent({timeSpent}: {timeSpent: number}): JSX.Element {\r\n    const gridValue: number = useSelector<IStateProps, IStateProps[\"grid\"]>((state)=> state.grid);\r\n\r\n    return (\r\n        <div className=\"indicator-frame__div\">\r\n            Time Spent: &nbsp; <strong> 00:<span id=\"time-spent\">{3*gridValue}</span> secs</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimeSpent;","import GridValue from \"../atoms/GridValue\";\r\nimport TimeIndicator from \"../atoms/TimeIndicator\";\r\nimport TimeSpent from \"../atoms/TimeSpent\";\r\n\r\nfunction IndicatorFrame(): JSX.Element{\r\n    return (\r\n        <div className=\"frame indicator-frame\">\r\n            <GridValue />\r\n            <TimeIndicator />\r\n            <TimeSpent timeSpent={48} />\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default IndicatorFrame;","type MovesProps = {\r\n    numberOfMoves: number,\r\n    moveDescription: string\r\n}\r\n\r\nfunction Moves({numberOfMoves, moveDescription}: MovesProps): JSX.Element {\r\n    return (\r\n        <div className=\"moves-frame__div\">\r\n            {moveDescription}: &nbsp; <strong>{numberOfMoves}</strong>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Moves;","import { useSelector } from \"react-redux\";\r\nimport { IStateProps } from \"../../../reducers/rootReducer\";\r\nimport Moves from \"../atoms/Moves\";\r\n// import SwitchButton from \"../atoms/SwitchButton\";\r\n\r\nfunction MovesFrame(): JSX.Element{\r\n    const gridValue: number = useSelector<IStateProps, IStateProps[\"grid\"]>((state)=> state.grid);\r\n    const totalMoves: number = useSelector<IStateProps, IStateProps[\"totalMoves\"]>((state)=> state.totalMoves);\r\n    const maxMoves = Math.round((gridValue * gridValue)/2)\r\n\r\n    return (\r\n        <div className=\"frame moves-frame\">\r\n            <Moves numberOfMoves={maxMoves} moveDescription=\"Maximum moves\" />\r\n            {/* <SwitchButton /> */}\r\n            <Moves numberOfMoves={totalMoves} moveDescription=\"Total moves\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovesFrame;","import GameBoard from \"../molecules/GameBoard\";\r\nimport IndicatorFrame from \"../molecules/IndicatorFrame\";\r\nimport MovesFrame from \"../molecules/MovesFrame\";\r\n\r\nfunction GameFrame(): JSX.Element{\r\n    return (\r\n        <div className=\"frame game-frame\">\r\n            <IndicatorFrame />\r\n            <GameBoard />\r\n            <MovesFrame />\r\n        </div>  \r\n    );\r\n}\r\n\r\nexport default GameFrame;","import { useSpring, animated } from \"react-spring\";\r\nimport GamePlayTemplate from \"../templates/GamePlayTemplate\";\r\nimport GameFrame from \"../UI/organisms/GameFrame\";\r\n\r\n\r\nfunction GamePlayPage(): JSX.Element {\r\n    const props = useSpring({ to: { opacity: 1, marginLeft: 0 }, from: { opacity: 0, marginLeft: -1000 }, transition: \"ease-in\", duration: 1500 })\r\n\r\n    return (\r\n        <animated.div style={props} className=\"game-play\">\r\n            <GamePlayTemplate  gameFrame={<GameFrame />}  />\r\n        </animated.div>\r\n    ); \r\n}\r\n\r\nexport default GamePlayPage;","import React from \"react\";\nimport { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport './App.scss';\nimport GameStartPage from './components/pages/GameStartPage';\nimport GameOverPage from './components/pages/GameOverPage';\nimport GameBravoPage from './components/pages/GameBravoPage';\nimport GamePlayPage from './components/pages/GamePlayPage';\nimport { useSelector } from \"react-redux\";\nimport { IStateProps } from \"./reducers/rootReducer\";\n\n\nfunction App() {\n  const hasStartedGame = useSelector<IStateProps, IStateProps[\"startedGame\"]>((state)=> state.startedGame);\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n            {/* <Route path=\"/\"  component={GameStartPage} /> */}\n          \n            <Route exact path=\"/\" >\n              <GameStartPage />\n            </Route>\n           \n           \n            <Route path=\"/play\">\n              {!hasStartedGame ? <Redirect to=\"/\" /> : <GamePlayPage />}\n            </Route>\n              \n            <Route path=\"/over\">\n              {!hasStartedGame ? <Redirect to=\"/\" /> : <GameOverPage />}\n            </Route>\n\n            <Route path=\"/finished\">\n              {!hasStartedGame ? <Redirect to=\"/\" /> : <GameBravoPage />}              \n            </Route>\n\n          </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","\r\nexport interface IStateProps {\r\n    grid: number,\r\n    minGridValue: number,\r\n    maxGridValue: number,\r\n    startedGame: boolean,\r\n    timeSpent: number,\r\n    totalMoves: number,\r\n    totalFoods: number,\r\n    foodsEaten: number,\r\n    gameSound: boolean,\r\n}\r\n\r\ntype Action = {type: string, payload: any } \r\n\r\nconst initialState = {\r\n    grid: 5,\r\n    minGridValue: 5,\r\n    maxGridValue: window.screen.width < 400 ? 10 : 12,\r\n    startedGame: false,\r\n    timeSpent: 0,\r\n    totalMoves: 0,\r\n    totalFoods: 0,\r\n    foodsEaten: 0,\r\n    gameSound:  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ? false : true,\r\n} \r\n \r\nconst rootReducer = (state: IStateProps = initialState, action: Action)=>{\r\n    switch(action.type){\r\n        case \"UPDATE_GRID\":\r\n            return {...state, grid: action.payload}\r\n        case \"START_GAME\":\r\n            return {...state, startedGame: action.payload}\r\n        case \"SET_TIME\":\r\n            return {...state, timeSpent: action.payload}\r\n        case \"COUNT_MOVES\":\r\n            return {...state, totalMoves: action.payload}\r\n        case \"TOTAL_FOODS\":\r\n            return {...state, totalFoods: action.payload}\r\n        case \"FOODS_EATEN\":\r\n            return {...state, foodsEaten: action.payload}\r\n        case \"TOGGLE_SOUND\":\r\n            return {...state, gameSound: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './reducers/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}